##########################################################################################
##############################  ASYMPTOTIC INDEPENDENCE ##################################
##########################################################################################
# We apply our method on a Gaussian copula with Pareto marginals

rm(list=ls())

## Load code ##
setwd("~/Dropbox/recherche/olivier/3_muscle/v4/code")
source(file = "muscle.R")
library(mvtnorm)
GaussToPar <- function(x){1/(1-pnorm(x))} # transform Gaussian into Pareto

##########################################################################################
########################################  PLOTS ##########################################
##########################################################################################

###################################  SIMULATE DATA #######################################
set.seed(321)
d <- 40
n <- 3*10^4
prop <- seq(0.005, 0.15, by = 0.005)
rho <- 0.5

Sigma <- matrix(rep(rho,d^2), ncol=d)
diag(Sigma) <- rep(1,d)
gauss <- rmvnorm(n, mean = rep(0,d), Sigma)
X <- t(apply(gauss, 2, GaussToPar))

result <- muscle_plot(X, prop)
which_k <- which.min(result[ ,4])
k <- result[which_k, 1]

# Evolution of our criterion with k
plot(result[ ,1], result[ ,4], type='l', ylim = c(0.7,0.95), xlab = "k", ylab = "penalized log-likelihood")
lines( x=c(k, k), y=c(0, result[which_k, 4]), lty=3, lwd=2)
lines( x=c(0, k), y=c(result[which_k, 4], result[which_k, 4]), lty=3, lwd=2)
text(k+35, 0.8, expression(paste(hat(k))== 1050))


# Evolution of the number of extremal directions with k
plot(result[ ,1], result[ ,3], type='l', xlab = "k", ylim = c(0, 70), ylab = expression(paste(hat(s)(k))))
lines( x=c(k, k), y=c(0,result[which_k, 3]), lty=3, lwd=2)
lines( x=c(0, k), y=c(result[which_k, 3],result[which_k, 3]), lty=3, lwd=2)
text( k, 50, expression(paste(hat(s)(hat(k))== 41)))


#########################  COMPARISON WITH THE TRUE DIRECTIONS ###########################
# Empirical extremal directions detected by our algorithm
  directions <- muscle_clusters(X, prop)
  M_emp <- as.matrix(directions[[1]][-(d+1), ])# the empirical matrix
  M_theor <- diag(d)
  weights <- directions[[5]]

# The False Positive directions
  FP <- tail( !duplicated( rbind(t(M_theor), t(M_emp)) ), ncol(M_emp) )
  sum(FP)
# The True Negative directions
  TN <- tail( !duplicated( rbind(t(M_emp), t(M_theor)) ), ncol(M_theor) )
  sum(TN)

# Hellinger distance: 1-h^2 = sum (sqrt(p_i*q_i)) on the TP only (otherwise = 0)
hell <- sqrt(1 - sum(sqrt(weights[!FP]/d)) )
hell

######################################################################################## 
#####################################  ALGORITHM #######################################
######################################################################################## 
source(file = "damex.R") # the damex algorithm

set.seed(1234)
n <- 3*10^4
d <- 40
prop <- seq(0.01, 0.12, by = 0.01)
N <- 2
hellinger <- list()
hellinger_damex <- list()
M_theor <- diag(d)

ptm<-proc.time()
for (i in 1:4){
  hell <- rep(NA,N)
  hell_damex <- rep(NA,N)
    for (r in 1:N){
      rho <- (i-1)/4
      Sigma <- matrix(rep(rho,d^2), ncol=d)
      diag(Sigma) <- rep(1,d)
      gauss <- rmvnorm(n, mean = rep(0,d), Sigma)
      X <- t(apply(gauss, 2, GaussToPar))
      
      # MUSCLE
      directions <- muscle_subsets(X, prop)
      M_result <- as.matrix(directions[[1]][-(d+1), ])# the empirical matrix
      weights <- directions[[5]]
     # The False Positive directions
      FP <- tail( !duplicated( rbind(t(M_theor), t(M_result)) ), ncol(M_result) )
      # The True Negative directions
      TN <- tail( !duplicated( rbind(t(M_result), t(M_theor)) ), ncol(M_theor) )
      hell[r] <- sqrt(1 - sum(sqrt(weights[!FP]/d)) )
      
      # DAMEX
      damex <- algo_damex(X, p=0.1, epsilon = 0.1)
      M_damex <- as.matrix(damex[-(d+1), ])
      weights_damex <- damex[d+1,]/sum(damex[d+1,]) 
      FP_damex <- tail( !duplicated( rbind(t(M_theor), t(M_damex)) ), ncol(M_damex) )
      TN_damex <- tail( !duplicated( rbind(t(M_damex), t(M_theor)) ), ncol(M_theor) )
      hell_damex[r] <- sqrt(1 - sum(sqrt(weights_damex[!FP_damex]/d)) )
      
      print(c(i,r))
    }
  hellinger[[i]] <- hell
  hellinger_damex[[i]] <- hell_damex
}
proc.time()-ptm
names(hellinger) <- c("0", "0.25", "0.5", "0.75")
names(hellinger_damex) <- c("0", "0.25", "0.5", "0.75")

bplot <- list(hellinger[[1]], hellinger_damex[[1]], hellinger[[2]], hellinger_damex[[2]],
                hellinger[[3]], hellinger_damex[[3]], hellinger[[4]], hellinger_damex[[4]])

color <- rep(c("orange","red"),4)
position <- c(0.5,2.5, 4.5, 6.5, 8.5)
names_box <- c("                                                        0",
               "                                                        0.25",
               "                                                        0.5",
               "                                                                0.75", " ")

boxplot(bplot, ylab="Hellinger distance", xlab=expression(paste(rho)), col = color, xaxt = "n")

axis(1, at = position, labels = names_box)

legend("bottomright", inset=.04, title="Mean Hellinger distance", horiz = TRUE,
       c("MUSCLE", "DAMEX"), fill=c("orange","red"), cex=1)

